comment_id,user,date,body
2488370982,twiss,2024-11-20T11:46:25+00:00,"There's an issue about moving the [Web Crypto Streams](https://webcrypto-streams.proposal.wintercg.org/) draft to WICG here: https://github.com/WICG/proposals/issues/185.  Implementers: please voice your support there if you're in favor of this work :blush:"
2488929106,davidben,2024-11-20T15:42:57+00:00,"This seems to go the route of automatically streaming every algorithm, which is not the way to do this. Cryptographic algorithms being streamable is the exception rather than the rule. In particular, modern symmetric cryptography uses AEADs, which are *not* streamable. There are some libraries which make them streamable, but this is a mistake. See https://www.imperialviolet.org/2015/05/16/aeads.html#:~:text=AEADs%20with%20large%20plaintexts"
2490224886,dead-claudia,2024-11-21T07:03:00+00:00,"@davidben To be fair, this is much simpler to spec and implement. And OpenSSL and its derivatives provide exactly this same kind of API, so browsers might not even be managing this buffer directly."
2490583469,twiss,2024-11-21T09:40:15+00:00,"@davidben The issue brought up there mainly affects decryption, not encryption. Though, you might (reasonably) argue that if we shouldn't have streaming decryption, we shouldn't have streaming encryption either, but there are plausible scenarios where it might still be useful, e.g. if the encrypting client might be memory-constrained but the decrypting client isn't (think SecureDrop or so).  I would be cautious to specify streaming encryption and/or decryption of only the non-AEAD modes, as it might incentivize using those, while we probably want to incentivize using AEAD. So if we don't want to have streaming encryption for AEAD, perhaps we shouldn't have streaming encryption at all, and just recommend chunking the plaintext (although this of course won't be possible for legacy protocols).  So, I think that starting with streaming hashing, for example as proposed in https://github.com/w3c/webcrypto/issues/73#issuecomment-455065709, might be better (and simpler).  _However_, having a draft in the WICG where we can work on that & iterate on the API still wouldn't hurt, IMHO :blush:"
2491562725,jasnell,2024-11-21T15:36:09+00:00,"@gobengo ... sorry I just spotted your question here: > @jasnell @tniessen wdyt of adding DigestStream to [wintercg/proposal-webcrypto-streams](https://github.com/wintercg/proposal-webcrypto-streams) ?  Definitely +1"
2491569345,jasnell,2024-11-21T15:38:40+00:00,"@davidben: > This seems to go the route of automatically streaming every algorithm, which is not the way to do this. Cryptographic algorithms being streamable is the exception rather than the rule....  Yep, this has come up in conversations a few times and I would consider the initial explainer / draft that we put together in wintercg as just an initial starting point. I think there's a TON of refinement and clarification that is needed. We wouldn't intend for ""automatically streaming every algorithm"" to be the actual approach we take."
2491724072,knightcode,2024-11-21T16:35:14+00:00,"Given the position that OpenSSL has taken, It doesn't seem like it's your job to protect us from ourselves or dictate system design. "
2491758885,twiss,2024-11-21T16:48:59+00:00,"Well - with no offense to the OpenSSL team, I don't think we should take their API as the end-all and be-all of crypto APIs.  AEAD modes are typically defined as single-shot functions, that don't allow passing a stream. Deviating from that would need a stronger justification than ""OpenSSL does it"", IMHO."
2491775688,davidben,2024-11-21T16:56:22+00:00,"Indeed many libraries do _not_ expose streaming AEADs, including some of those used by browsers. OpenSSL's streaming API is an artifact of them trying to mix multiple, unrelated algorithms into the same API. (A similar mistake that has been made here.)  Any proposal with a streaming AEAD is a non-starter here. AEADs are simply not streaming primitives."
2491863584,knightcode,2024-11-21T17:34:34+00:00,"I don't mean to stir trouble, but you didn't address my point. It was not ""OpenSSL does it."" It was ""it's not your decision to make."" "
2491885995,jpsugar-flow,2024-11-21T17:45:30+00:00,How much more work would it create to split hashing from encryption here? It seems that the latter is contentious but the former is not.
2492382733,dead-claudia,2024-11-21T21:33:41+00:00,"Also, due to the current state of cryptography algorithms and their usage, stream input to hashes is a bit more critical.  - Most symmetric encryption currently uses AES, a block cipher. The streaming modes for block ciphers like AES could mostly be done in userland as (aside from GCM and GCM-SIV) most of them are very straightforward to implement atop sync algorithms. GCM is trickier and requires a bit of math, and counter mode requires an awkward carry calculation, but the rest of the common ones are just key-width XORs at specific times. - Asymmetric encryption usually operates on whole buffers in practice, as the relevant messages are normally only kilobytes long. - Hashing is very frequently done over streams of indefinite length. S3's API for instance accepts an `x-amz-checksum-{ALGO}` header where two of the algorithms available are SHA-1 and SHA-256. This, for a chunk of several gigabytes, would necessitate a streaming hash before uploading in most browsers."
2492650320,bradisbell,2024-11-22T00:52:14+00:00,"Unfortunately, the authors and core proponents of this spec couldn't care less about hashing use cases outside of crypto.  We've hashed over this (heh) on previous threads while trying to get something as simple as SHA-1 on ""insecure"" origins:   - https://github.com/w3c/webcrypto/issues/170  - https://github.com/w3c/webcrypto/issues/238  - https://github.com/w3c/webcrypto/issues/28  The key comment from @twiss:  > In any case, I empathize with your use case but it's not one that Web Crypto was intended to serve.  https://github.com/w3c/webcrypto/issues/170#issuecomment-1036630884  Therefore, I doubt we'll get built-in hashing of streams without the associated crypto side... but who knows, maybe someone will prove me wrong.  We're stuck with DIY in the meantime.  At least it's possible."
2493335785,twiss,2024-11-22T09:40:08+00:00,"@bradisbell Bringing in unrelated issues isn't really relevant, and also not really helpful while we're actively discussing the addition of streaming to Web Crypto.  @dead-claudia and @jpsugar-flow I tend to agree.  Taking a step back, and perhaps contrary to what I said before in this thread; if we want to focus on adding streaming hashing first since it's least controversial, _and_ if everyone is happy with the proposal in https://github.com/w3c/webcrypto/issues/73#issuecomment-455065709 (i.e. extending the existing function rather than adding a new `DigestStream` object or some such), perhaps we don't strictly need to have a separate draft in WICG for that, and we could just directly make a PR here?  If folks are OK with that, I can write something up."
2494493725,jasnell,2024-11-22T18:27:36+00:00,"> ... and if everyone is happy with the proposal in https://github.com/w3c/webcrypto/issues/73#issuecomment-455065709 (i.e. extending the existing function rather than adding a new DigestStream object or some such),  @jakearchibald's proposal looks good to me. Workers will need to keep `DigestStream` around forever as we don't make breaking changes but having the existing `crypto.subtle.digest` accept a `ReadableStream` as input would work just as well for our uses cases. Actually, I would go one step further and say that instead of just accepting a `ReadableStream`, allow it to accept any `Iterable` and `AsyncIterable`.  I imagine that `crypto.subtle.sign` and `crypto.subtle.verify` could both also follow the same pattern without much controversy."
2494583000,taralx,2024-11-22T19:03:40+00:00,"Oh, I missed that proposal. Very elegant. +1 from me. (I'm jpsugar-flow, but this is not work-related for me.)"
