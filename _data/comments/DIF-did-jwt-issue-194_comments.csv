comment_id,user,date,body
2481500015,dlongley,2024-11-17T19:53:26+00:00,"> If the holder is to never present the base VC it feels like it would be valuable information for a verifier to know that they have received a derived proof that is a full disclosure.  Hmm, adding any additional primitives to control this seems to imply it would be for a scenario where the verifier would be asking: ""Did you tell me everything in your credential or not? If you didn't tell me everything, you need to do that ... no matter what it is.""  Unless I'm mistaken about that being the target scenario -- then I don't think that's a valid use case and seems to favor oversharing / sounds like it encourages privacy violations to me. If a verifier happens to be able to tell that whatever they asked for was everything in the credential (by looking at the indexes as you say), I don't think that's an issue, but I don't think we want to encourage verifiers to be able to ""ask for everything"". If a verifier wants to use an implementation that can tell them more easily whether ""everything was revealed or not"" -- then that's their perogative."
2481546842,brianorwhatever,2024-11-17T20:50:25+00:00,"Ya I am thinking more about the latter case where the data is already available to them without any new primitives. If it’s already technically available I think it should be easily available.  On Sun, Nov 17, 2024 at 11:53 AM Dave Longley ***@***.***> wrote:  > If the holder is to never present the base VC it feels like it would be > valuable information for a verifier to know that they have received a > derived proof that is a full disclosure. > > Hmm, adding any additional primitives to control this seems to imply it > would be for a scenario where the verifier would be asking: ""Did you tell > me everything in your credential or not? If you didn't tell me everything, > you need to do that ... no matter what it is."" > > Unless I'm mistaken about that being the target scenario -- then I don't > think that's a valid use case and seems to favor oversharing / sounds like > it encourages privacy violations to me. If a verifier happens to be able to > tell that whatever they asked for was everything in the credential (by > looking at the indexes as you say), I don't think that's an issue, but I > don't think we want to encourage verifiers to be able to ""ask for > everything"". If a verifier wants to use an implementation that can tell > them more easily whether ""everything was revealed or not"" -- then that's > their perogative. > > — > Reply to this email directly, view it on GitHub > <https://github.com/w3c/vc-di-bbs/issues/194#issuecomment-2481500015>, or > unsubscribe > <https://github.com/notifications/unsubscribe-auth/ABWK6FD46VAHTQTVEXJZCMT2BDX4ZAVCNFSM6AAAAABR5SI2UWVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDIOBRGUYDAMBRGU> > . > You are receiving this because you authored the thread.Message ID: > ***@***.***> > "
2491848946,Wind4Greg,2024-11-21T17:27:16+00:00,"Hi @brianorwhatever and @dlongley this information is embedded in BBS proofs but **not** made available from the APIs in the BBS signature scheme spec. In the Proof Verification https://www.ietf.org/archive/id/draft-irtf-cfrg-bbs-signatures-06.html#name-proof-verification-proofver the value **U** represents the number of undisclosed BBS messages, while the **R** value is the number of revealed messages.  Since its not in the BBS API I'm not inclined to add it to the VC-DI-BBS spec. Thoughts?"
2491895240,brianorwhatever,2024-11-21T17:50:01+00:00,ok yeah if it isn't exposed at the signature scheme API level I think it's fine to leave it off then. Thank you @Wind4Greg 
