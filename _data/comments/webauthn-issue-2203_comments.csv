comment_id,user,date,body
2489390808,agl,2024-11-20T19:31:39+00:00,"These extensions do, however, process their inputs.  The `prf` extension needs to perform base64url decoding of the values, so we need a valid input string. The AppId extensions need to convert the input to UTF-8 and hash it. In both cases, the input needs to be valid strings and invalid UTF-16 would cause an error.  So perhaps these are correctly USVString?"
2489501825,zacknewman,2024-11-20T20:39:40+00:00,"That argument applies to _many_ of the `DOMString`s in the spec (i.e., many areas where you see `DOMString` _have to be_ valid Unicode). Making these lone 3 `USVString`s into `DOMString`s is a much smaller change, makes the spec consistent, and does not make it more fragile since there are _more_ requirements than just valid Unicode. base64url decoding is defined on arbitrary bytes. If the input is not valid UTF-8, then the decoding will either fail or decode into something invalid which is possible even when the input is valid UTF-8.  The `prf` extension is also inconsistent with how the base64URL encoding of a Credential ID is typed elsewhere. For example, [`RegistrationResponseJSON.id`](https://w3c.github.io/webauthn/#dom-registrationresponsejson-id) is a `DOMString`.  It would be nice to pick one approach and stick with it:  * Pick the most strict type possible * Define all strings as `DOMString` per the recommendation  The first approach will cause _a lot_ of `DOMString`s to be changed to `USVString`—including some of which _revert_ previous changes from `USVString` to `DOMString`—and I don't think it appreciably makes the spec that much more type safe since many things require additional properties anyway (i.e.,`USVString` won't make it infallible anyway).  The second approach is much easier, aligns with the recommendation, and aligns with previous PRs that changed `USVString`s to `DOMString`s."
