comment_id,user,date,body
2474770293,nsatragno,2024-11-13T20:58:40+00:00,"> What is the rationale? RP might accidentally call the signal APIs due to bug?  Yes.  > However, for the signal APIs, RP indicates that the acceptable credentials with an intention,  Experience with HSTS preloading indicates that given the scale of the web, sharp APIs must have some way to undo damage from improper use. Many tears have been shed for a misplaced API call. Someone (probably, lots of people) may hold the API wrong and clear user passkeys.  However, it's not going to be possible to implement hiding and restoring for every authenticator, e.g. Windows Hello and security keys don't have a ""hide"" functionality. Thus, the language we chose to standardize.  (as an aside, [Google Password Manager](https://developer.chrome.com/blog/passkeys-signal-api?hl=en) is doing hard deletion right now as we hone the implementation, but we have plans to switch to hiding / restoring next year.)  > In the case of the user directly goes through the authenticator dedicated UI and then delete the credential, it would not be reported to the RP and which causes credential mismatch.  We do not specify what authenticator dedicated UI does, and reporting from the authenticator to the site is out of scope of this feature.  "
2475213689,Kieun,2024-11-14T02:07:29+00:00,"> Experience with HSTS preloading indicates that given the scale of the web, sharp APIs must have some way to undo damage from improper use. Many tears have been shed for a misplaced API call. Someone (probably, lots of people) may hold the API wrong and clear user passkeys.  Understood. If it is the case, I recommend that the authenticator would notify the user that the recovered credential may not work when the user tries to restore the hidden credentials from the authenticator.  What do you think so?  We could add some notes around how authenticator may communicate with users when restoring the credential."
