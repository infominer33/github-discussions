comment_id,user,date,body
2564256671,peacekeeper,2024-12-28T07:55:49+00:00,"> A DID is simply (a sometimes verifiable) name (identifier) for something (aka a subject). DIDs can name (reference, identify) Every Little Thing (#ELT) on the planet, every piece of knowledge, every bit of understanding, every ounce of wisdom (every possible subject)  I agree with this, but I also agree with @stevenvegt that ""the DID method should only describe the mechanism for the Create, Resolve, Update and Deactivate operations and nothing about the actual identity of the entity.""  DID methods were introduced to distinguish between different techical infrastructure that can be used for implementing DIDs, but this has nothing to do with what DIDs identify."
2564591557,mwherman2000,2024-12-29T02:38:29+00:00,"> DID methods were introduced to distinguish between different techical infrastructure that can be used for implementing DIDs, but this has nothing to do with what DIDs identify.  @peacekeeper Markus can you quote a reference from [DID-CORE]?  ...or is this folklore? We need to stay with the facts (as written in [DID-CORE]) - that's what specifications are for.  I was deeply involved in the [DID-CORE] and always viewed DID Methods as (abstract) classes of subjects/data types. I believe there is language in the spec that says a DID Method isn't expected to be limited to a single underlying implementation (which is just the opposite).  ![Web 7.0-DID-STACK ARM 0.11-annotated.png](https://github.com/user-attachments/assets/28d378da-704e-4cfd-b86c-fe6d392727c5)  "
2564636428,peacekeeper,2024-12-29T07:15:14+00:00,"> @peacekeeper Markus can you quote a reference from [DID-CORE]?  I have provided references several times before, so please just see those other threads, or read the DID specification.  > I was deeply involved in the [DID-CORE] and always viewed DID Methods as (abstract) classes of subjects/data types.  I was much more involved in DID Core than you, and this interpretation has never even occurred to me. Please accept that this is NOT what DID methods are for."
2564647530,mwherman2000,2024-12-29T08:09:42+00:00,This is a professional forum and we shouldn't rely on individual options that are stated with no backup.  IMO your reply is an example of https://hyperonomy.com/2019/04/09/clique-speak/
2564650804,mwherman2000,2024-12-29T08:23:57+00:00,> This has never occurred to me before   This totally surprises me. I have written extensively on this topic for several years (publicizing most if not all of these articles on the CCG mailing list):  - 2018 https://hyperonomy.com/2018/01/24/tokenization-of-every-little-thing-elt/ - 2018 https://hyperonomy.com/2018/12/31/the-trusted-digital-web/ - 2018 https://hyperonomy.com/2018/12/06/refactoring-ubl-2-2-business-documents-for-enacting-business-processes-on-the-blockchain-wip/ - 2019 https://hyperonomy.com/2019/01/24/what-is-a-did/ - 2019 https://github.com/mwherman2000/indy-arm/blob/master/README.md - 2019 https://hyperonomy.com/2019/01/04/the-path-from-a-id-did-to-a-real-life-something/ - 2021 https://hyperonomy.com/2021/04/26/the-verifiable-economy-architecture-reference-model-ve-arm-fdo/ - 2021 https://hyperonomy.com/2021/07/26/bootstrapping-a-vdr-based-decentralized-credential-object-platform-von-example/ - 2021 https://hyperonomy.com/2021/06/15/the-verifiable-economy-fully-decentralized-object-fdo-example-bobs-udid-document/ - 2021 https://hyperonomy.com/2021/03/18/fully-decentralized-twitter-dewitter-app-scenario-platform-requirements-presentation/ - 2021 https://hyperonomy.com/2021/03/15/tdw-glossary-management-and-collaboration-platform-tdw-gmcp-digital-identity-neighborhood/ - 2021 https://hyperonomy.com/2018/12/21/decentralized-identifiers-dids-architecture-reference-model-arm/ - 2022 https://hyperonomy.com/2022/12/18/web-7-0-didcomm-agent-architecture-reference-model-didcomm-arm-0-40-december-18-2022/ - 2021 https://hyperonomy.com/2021/04/26/the-verifiable-economy-architecture-reference-model-ve-arm-fdo/ 
2564658874,mwherman2000,2024-12-29T09:02:33+00:00,"Lastly (I hope), we have taken this 2 huge steps further with: 1. Dynamically generated DID Method names (removing the need for static DID Methods) 2. A fully functional DID Document inheritance model...  ![Web 7.0-DID-OBJECT-ARM 0.4.png](https://github.com/user-attachments/assets/7756ae84-297a-4c20-b243-40009610dfcb)  We're huge believers in the #OpenToInnovation Principle for the Internet... https://hyperonomy.com/2019/03/12/internet-protocols-and-standards-not-only-need-to-be-open-but-more-importantly-open-to-innovation/  "
2564667432,mwherman2000,2024-12-29T09:39:24+00:00,"> So the DID method should only describe the mechanism for the Create, Resolve, Update and Deactivate operations and nothing about the actual identity of the entity.  This statement is not completely true.  The entire purpose of a subject's service endpoints are to enable interaction with the underlying entity (addressable by its DID). In Web 7.0, DIDScript(tm) exploits this concept: - DIDScript(tm) Language 0.3 Interpreter for DIDs, DID Documents, DID Agent Clusters, and DID Objects (https://youtu.be/mf0aKLvJoCw)  In addition, DIDScript supports round-robin,  load-balanced DID Agent Clusters."
